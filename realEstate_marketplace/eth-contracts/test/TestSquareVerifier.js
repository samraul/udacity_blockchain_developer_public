// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('Verifier');
fs = require('fs');

contract('SquareVerifier', accounts => {

    const account_one = accounts[0];

    describe('test square verifier', function () {
        beforeEach(async function () { 
            this.contract = await SquareVerifier.new({from: account_one});
        })

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('verify correct proof', async function () { 
            const proofData = JSON.parse(fs.readFileSync("./test/proof.json").toString());
            const ret = await this.contract.verifyTx(proofData.proof.a, proofData.proof.b, proofData.proof.c, proofData.inputs);
            
            // verify event
            assert.equal(ret.logs.length, 1);
            assert.equal(ret.logs[0].event, "Verified");
        })

        // Test verification with incorrect proof
        it('verify incorrect proof', async function () { 
            const proofData = JSON.parse(fs.readFileSync("./test/proof.json").toString());
            proofData.inputs[0] = proofData.inputs[1]; // mess up the inputs
            const ret = await this.contract.verifyTx(proofData.proof.a, proofData.proof.b, proofData.proof.c, proofData.inputs);

            // verify no event
            assert.equal(ret.logs.length, 0);
        })

    });
    
})
